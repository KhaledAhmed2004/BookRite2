openapi: 3.0.0
info:
  title: Banner Management API
  version: 1.0.0
  description: API endpoints to manage banners on the platform.
servers:
  - url: http://localhost:5000
    description: Local development server

tags:
  - name: Banners
    description: Banner related operations

paths:
  /api/v1/banners:
    get:
      tags:
        - Banners
      summary: Get all banners
      description: Retrieve all banners from the database.
      responses:
        "200":
          description: A list of banners.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  statusCode:
                    type: integer
                    example: 200
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Banner"
        "404":
          description: No banners found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  statusCode:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: "No banners found"

    post:
      tags:
        - Banners
      summary: Add a new banner with image upload
      description: |
        Adds a new banner with an image file upload.

        Business Logic:
        1. User must be Admin (authorization required).
        2. Request must be multipart/form-data with image file.
        3. File type must be one of .jpg, .jpeg, or .png.
        4. Uploaded image stored under /uploads/image/, and URL saved as `image` in DB.
        5. `is_active` is default true.
        6. `isDeleted` is default false (handling soft delete).
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: Banner image file (jpg, jpeg, png)
                is_active:
                  type: boolean
                  description: Whether the banner is active; defaults to true
              required:
                - image
      responses:
        "201":
          description: Banner added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  statusCode:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: Banner added successfully
                  data:
                    $ref: "#/components/schemas/Banner"
        "400":
          description: Bad Request - invalid file type or missing file
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  statusCode:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: "Only .jpeg, .png, .jpg files supported"

  /api/v1/banners/{id}:
    get:
      tags:
        - Banners
      summary: Get a single banner by ID
      description: Retrieve banner by its ID from the database.
      parameters:
        - name: id
          in: path
          required: true
          description: Banner ID (MongoDB ObjectId)
          schema:
            type: string
      responses:
        "200":
          description: Banner found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  statusCode:
                    type: integer
                    example: 200
                  data:
                    $ref: "#/components/schemas/Banner"
        "404":
          description: Banner not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  statusCode:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: "Banner not found"

    patch:
      tags:
        - Banners
      summary: Update a banner by ID
      description: |
        Update banner's image URL and/or active status.

        Business Logic:
        1. User must be Admin (authorization required).
        2. Banner must exist.
        3. If image is updated, old image file is deleted.
        4. Returns updated banner.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Banner ID (MongoDB ObjectId)
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                image:
                  type: string
                  description: New image URL
                  example: "https://example.com/newbanner.jpg"
                is_active:
                  type: boolean
                  description: Banner active status
      responses:
        "200":
          description: Banner updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Banner updated successfully
                  data:
                    $ref: "#/components/schemas/Banner"
        "404":
          description: Banner not found or failed to update
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  statusCode:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: "Banner not found or failed to update"

    delete:
      tags:
        - Banners
      summary: Delete a banner by ID
      description: |
        Delete banner by its ID.

        Business Logic:
        1. User must be Admin (authorization required).
        2. Banner must exist.
        3. Deletes banner and associated image file.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Banner ID (MongoDB ObjectId)
          schema:
            type: string
      responses:
        "200":
          description: Banner deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  statusCode:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Banner deleted successfully
        "404":
          description: Banner not found or failed to delete
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  statusCode:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: "Banner not found or failed to delete"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Banner:
      type: object
      properties:
        _id:
          type: string
          description: MongoDB ObjectId
          example: "60b8a84e38f2003a26a3e1bb"
        image:
          type: string
          format: uri
          description: URL of the banner image (uploaded and stored by backend)
          example: "https://example.com/uploads/banner1.jpg"
        is_active:
          type: boolean
          description: Banner active status
          example: true
        isDeleted:
          type: boolean
          description: Indicates whether the banner is soft-deleted
          example: false
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2025-06-18T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2025-06-18T12:30:00Z"
